
基于CBS算法和SLAM技术的智能驾驶系统

摘要：本文介绍了一种基于CBS算法和SLAM技术的智能驾驶系统。该系统利用智能车搭载的编码器、激光雷达、惯导等传感器，结合软件的开发，和上位机的调度等方式，使得小车能够具备自动建图、避障和导航的功能。系统的实现大致可分为两个阶段：比赛场地建图阶段和路径规划与导航阶段。通过实验验证，该系统能够在较大范围的地图下，通过路径规划算法，控制小车以最短，最快的路径到达目标点，同时能够应对复杂的周围情况。
关键词：智能驾驶系统、CBS算法、SLAM技术、传感器、自动建图、M*算法、OD+ID算法、ROS系统、路径规划、混合算法

一、方案概述
1.1 技术路线
本研究的技术路线主要包括两个阶段：比赛场地建图阶段和路径规划与导航阶段。在比赛场地建图阶段，我们使用了cartographer以及非常实用的gazebo三维仿真软件和rviz可视化软件。通过gazebo构建的小车模型和三维仿真环境，根据小车搭配的配件，能够对应修改相关配置参数。应用SLAM技术，建立二维栅格化地图。在路径规划与导航阶段，我们使用上位机发送开始命令，让智能车开始规划路径。并且用CBS算法代替常规的A*算法，能更快解决路径冲突问题，避免小车发生碰撞。并对小车采用合并策略，提高小车对于路径计算的速度，减少反应时间。
1.2 技术难点与创新点
技术难点主要包括对于复杂地形的路径规划运算量大，系统运行会滞后，以及大多数关于优化解决最短路径的工作都是单一对象的优化，本项目需实现“联合优化”，对多辆小车一起进行规划最短路径。创新点在于使用CBS算法替代A*搜索算法，可以更快的排除冲突的解决方案，实现小车相互避让，以及实现了以下合并策略。两个智能车ai, aj合并成一个meta-agent {i,j}，并记录冲突的次数，这样做能显著的提升速度
1.3 测试效果
我们进行了实地测试，结果表明，当我们通过上位机发送开始命令后，智能车可以在没有人为干预的情况下，从起点区域出发，根据构建好的地图自主导航，沿着比赛赛道无碰撞前进，并且自主避障绕过锥桶障碍物，最终停止在终点区域。

二、问题描述
2.1 关键性问题以及相关研究
本研究面临的关键性问题主要包括SLAM建图与launch文件的理解和编写，以及多智能体路径规划问题。这些问题在智能驾驶系统中具有重要意义，解决它们能够提高系统的性能和可靠性。
首先，SLAM建图是智能驾驶系统中的关键环节之一。SLAM技术旨在实现机器人在未知环境中同时进行定位和地图构建的能力。该问题涉及到传感器数据的处理、特征提取、数据关联和状态估计等方面。其中，建立精准的先验地图是实现全局路径规划的前提条件。在SLAM建图中，常用的算法包括HectorSLAM、Gmapping和cartographer等。这些算法在不同的环境和传感器配置下具有各自的优点和适用性。考虑到激光雷达采样频率较低（10Hz），需构建地图的场景较小，赛道地面较为平坦、环境较为单一，本方案选择计算量较小且精度较高的 Gmapping 算法。
其次，多智能体路径规划是智能驾驶系统中的另一个重要问题。当存在多个智能车同时在同一地图中运行时，需要进行多智能体路径规划，以保证每辆车都能找到最优路径，并避免发生碰撞。传统的单智能体路径规划算法无法直接应用于多智能体情境，因为多车之间的路径冲突需要考虑。为解决这一问题，引入了多智能体路径规划算法，如CBS算法、M*算法和OD+ID算法等。这些算法通过考虑智能车之间的冲突关系，能够高效地规划多智能体的最优路径。
另外，对于launch文件的理解和编写也是一个关键性问题。在ROS系统中，launch文件用于启动和配置ROS节点，控制节点的生命周期和参数设置。理解和编写launch文件对于配置智能驾驶系统的节点和参数至关重要。通过合理配置launch文件，能够实现传感器数据的订阅与发布、节点的协调与通信等功能。
2.2 相关研究
针对SLAM建图问题，已有大量的研究工作。HectorSLAM算法是一种基于激光雷达的实时SLAM算法，它能够在动态环境下进行建图，并具有较高的鲁棒性。Gmapping算法基于激光雷达和里程计数据，通过粒子滤波方法进行建图。cartographer算法是一种同时使用激光雷达和IMU数据的SLAM算法，能够实现高精度的建图。
此外，还有一些其他的SLAM算法和方法，如视觉SLAM、RGB-D SLAM等，它们利用摄像头或深度传感器数据进行建图。这些算法在不同的场景和应用需求下具有各自的优势和适用性。
对于多智能体路径规划问题，CBS算法是一种有效的解决方案。CBS算法通过解决多智能体之间的路径冲突问题，能够快速找到最优的路径规划方案，避免碰撞和冲突。M*算法是另一种多智能体路径规划算法，它通过动态修改地图来避免冲突，并具有较高的计算效率。OD+ID算法结合了基于目标的路径规划和基于交互的路径规划，能够在多智能体场景中实现高效的路径规划。
在ROS系统的使用方面，有丰富的教程和文档可供参考。ROS Wiki是ROS系统的官方文档，提供了详细的说明和示例代码。ROS Answers是ROS社区的问答平台，用户可以在这里提问和寻求帮助。此外，还有许多开源项目和社区提供的代码库和示例程序，可以帮助理解和编写launch文件。
综上所述，本研究面临的关键性问题已有大量相关研究可供参考。通过借鉴和应用这些研究成果，能够有效解决SLAM建图、多智能体路径规划和launch文件编写等问题，推动智能驾驶系统的发展和应用。

三、技术方案
3.1 CBS算法在路径规划中的应用
在路径规划与导航阶段，我们使用CBS（Conflict-Based Search）算法代替常规的A*算法。CBS算法是一种多智能体路径规划算法，它可以更快地解决路径冲突问题，避免小车发生碰撞。我们还实现了一个合并策略，将两个智能车ai, aj合并成一个meta-agent {i,j}，并记录冲突的次数，这样做能显著的提升路径规划的速度。
3.2 SLAM技术在建图中的应用
在比赛场地建图阶段，我们使用了SLAM（Simultaneous Localization and Mapping）技术。通过gazebo构建的小车模型和三维仿真环境，根据小车搭配的配件，能够对应修改相关配置参数。应用SLAM技术，建立二维栅格化地图。这种方法可以快速地建立精准的先验地图，为全局路径规划提供服务。
3.3Costmap 代价地图算法在智能驾驶系统中的应用
机器人的位置是根据从编码器和惯性传感器（IMU 传感器）获得的测位来估计的。然后，通过安装在机器人上的距离传感器来计算机器人与障碍物之间的距离。导航系统将机器人位置、传感器姿态、障碍物信息和作为 SLAM 地图的结果而获得的占用网格地图调用到固定地图（static map），用作占用区域（occupiedarea）、自由区域（free area）和未知区域（unknown area）。
在导航中，基于上述四种因素，计算障碍物区域[6]、预计会和障碍物碰撞的区域以及机器人可移动区域，这被称为成本地图（costmap）。根据导航类型，成本地图又被分成两部分。一个是 global_costmap，在全局移动路径规划中以整个区域为对象建立移动计划，其输出结果就是 global_costmap。而另一个被称为 local_costmap，这是在局部移动路径规划中，在以机器人为中心的部分限定区域中规划移动路径时，或在躲避障碍物时用到的地图。然而，这两种成本图的表示方法是相同的，尽管它们的目的不同。
costmap 用 0 到 255 之间的值来表示。数值的含义如图 11-19 所示，简单地说，根据该值可以知道机器人是位于可移动区域还是位于可能与障碍物碰撞的区域。每个区域的计算取决于第 11.6 节中指定的 costmap 配置参数。
•000：机器人可以自由移动的 free area（自由区域）
•001~127：碰撞概率低的区域
•128~252：碰撞概率高的区域
•253~254：碰撞区域
•255：机器人不能移动的占用区域（occupied area）
如下所示为障碍距离与 costmap 值的关系图













图 3.1 障碍距离与 costmap 值的关系图
3.4 TF 坐标变换在智能驾驶系统中的应用
变换树定义了不同坐标系之间的偏移。例如，他有可移动的基座和位于基座上方的激光雷达，那么对于这台机器人，一个坐标系原定位于机器人基座中心， 另一个坐标系原点位于激光雷达传感器中心。将位于基座上的坐标系定义为
base_link，位于激光雷达上的坐标系定义为 base_laser。如下图所示：激光雷达到前方物体距离为 0.3m，而机器人的中心是在基座的中心，所以我们就需要利用 tf 来实现两个坐标之间的关系变换。



图 3.2 TF 坐标示意图
如图 3.2 所得，激光雷达位于基座中心前方 0.1m 且上方 0.2m 位置。因此可以获取到 base_link 和 base_laser 的变换关系，base_link 到 base_laser 坐标必须平移（x:0.1m,y:0.0m,z:0.2m）。由于机器人在控制时是以 base_link 为基准的，所以要根据两者的关系进行坐标转换。变换过程只需要将两者的位置关系告知 tf,由 tf 软件包完成其余工作。
为了在上述例子中使用 tf 软件包进行坐标变换，需要创建 2 个节点，分别对应于 base_link 和 base_laser 坐标系并确定那一个是父节点，哪一个是子节点。需要注意的是，tf 假设的所有变换都是由父节点到子节点的。我们假设
base_link 为 父 节 点 ， 因 此 base_link 和 base_laser 之 间 的 变 换 矩 阵 是
（x:0.1m,y:0.0m,z:0.2m）,如图 3.3 所示，通过变换，将激光雷达数据转换到base_link 坐标系下，机器人就可以利用此信息来实现避障了。

图 3.3 坐标计算示意图

3.5 运动学控制与建模
得到传感器信息并规划出合理路径后，还需要合适的控制算法保证车辆按照规划路径运行，最终到达终点。常见控制算法有：PID 算法，纯跟踪算法，模型预测控制，神经网络，模糊控制。其中，由于工程具有一定程度计算量，控制输出与控制响应具有时间差，纯跟踪算法无法满足竞速需求。而模型预测控制与神经网络对模型要求较高，因此本方案在 PID 算法与模糊控制间进行了对比选择。经过实际测试，PID 算法可以满足控制需求，相对于模糊控制[5]，PID 具有简单易行的特点，参数也易于调整，最终本方案选择 PID 控制算法进行车模控制。
运动学模型分为正运动学模型和逆运动学模型，以移动底盘为主体分析一下两个模型：
（1）逆运动学模型（图 3.4）：根据运动规划的线速度 X，Y，角速度 Z，得出三轮全向轮各个轮子的线速度，这是移动底盘所需要得到的数据，由于 ROS 给底盘发送的是 geometry_msgs/Twist 的消息格式，并不是直接发送三个轮子每个轮子的速度，所以我们需要根据正向运动学模型方程来求解出三个轮子的速度。



图 3.4 逆运动学求解
（2）正运动学模型（图 3.5）：根据三个轮子各个的运动速度，我们可以合成移动底盘整体的运动线速度 X，Y，角速度θ；主要的应用是在使用测程法
（odometry）时，我们需要测量每个轮子的编码器脉冲数来计算轮子的转速，最终得到三个轮子线速度，根据逆运动学模型方程求解出移动底盘整体的线速度X，Y，角速度 Z。


图 3.5 正运动学求解

四、方案实现
4.1 CBS算法的实现
CBS算法的实现主要包括两个步骤：首先，我们使用CBS算法对每个智能车进行路径规划，找到没有冲突的路径；然后，我们实现了一个合并策略，将两个智能车ai, aj合并成一个meta-agent {i,j}，并记录冲突的次数。这样做可以显著提升路径规划的速度，并且可以有效地解决路径冲突问题。
4.2 SLAM技术的实现
SLAM技术的实现主要包括两个步骤：首先，我们使用gazebo构建的小车模型和三维仿真环境，根据小车搭配的配件，对应修改相关配置参数；然后，我们应用SLAM技术，建立二维栅格化地图。这种方法可以快速地建立精准的先验地图，为全局路径规划提供服务。
五、测试分析
5.1 测试环境和设备
我们的测试环境是一个模拟的比赛场地，包括起点区域、终点区域、赛道和锥桶障碍物等。测试设备主要包括智能车和上位机。智能车搭载了编码器、激光雷达、惯导等传感器，上位机负责发送开始命令和终止命令，以及接收智能车的里程计和雷达数据。
5.2 测试结果和分析
测试结果表明，当我们通过上位机发送开始命令后，智能车可以在没有人为干预的情况下，从起点区域出发，根据构建好的地图自主导航，沿着比赛赛道无碰撞前进，并且自主避障绕过锥桶障碍物，最终停止在终点区域。这个结果验证了我们的技术方案的有效性。在测试过程中，我们还发现CBS算法和合并策略可以显著提升路径规划的速度，SLAM技术可以快速地建立精准的先验地图。
六、作品总结
本文介绍了一种基于CBS算法和SLAM技术的智能驾驶系统。该系统利用智能车搭载的编码器、激光雷达、惯导等传感器，结合软件的开发，和上位机的调度等方式，使得小车能够具备自动建图、避障和导航的功能。系统的实现大致可分为两个阶段：比赛场地建图阶段和路径规划与导航阶段。通过实验验证，该系统能够在较大范围的地图下，通过路径规划算法，控制小车以最短，最快的路径到达目标点，同时能够应对复杂的周围情况。

参考文献

[1] ...
[2] ...
[3] ...




